body {
    margin: 0;
    font-family: sans-serif;
}

            /* PRIMERA COSA IMPORTANTE: HACER UN CONTENEDOR UNA FLEXBOX  */
.flexbox {
    display: flex;
    border: 1px solid black; /* Este borde se lo agrego para notar los límites de mi caja padre (ahora una flexbox) y de los flex-items */
    height: 80vh;
}

/* Se le da a la caja padre la propiedad de display flex. Para que sus items sean flexibles. La caja padre por sí sola es como un display block. Hacerla Flex le da flexibilidad a los hijos */

.flex-item {
    width: 180px;
    height: 100px;
    background-color: red;
    /* margin: 10px; */
    text-align: center;
    align-content: center;
}

.flex-item:first-child {
    background-color: aqua;
}
.flex-item:last-child {
    background-color: blue;
}
/* IMPORTANTE: NO DARLES PADDING A LAS FLEX-ITEM PARA CENTRAR SU CONTENIDO. AGREGARLES PADDING LES QUITA SU PROPIEDAD DE FLEXIBLE  */
/* ES MEJOR USAR align-content: center en la caja padre (en nuestro caso en .flexbox)  */

            /* PROPIEDAD FLEX DIRECTION (también para la caja padre .flexbox) */

/* Por defecto es row (La caja padre se comporta como una fila. Las cajas hijas (flex-items) se van a ordenar horizontalmente ) con el main axis en horizontal en la misma dirección del texto (de izq a derecha en nuestro idioma) */

/* También existe column. Que hace que el main axis sea vertical. (La caja padre se comporta como una columna, por lo que las cajas hijas flex-item se van a ordenar verticalmente.*/
/* Por defecto el main axis en column va dirigido de arriba a abajo */

.flexbox {
    flex-direction: row;
}

/* Importante: Las cajas flex-items, por defecto ocupan el TOTAL del cross axis. Si no le definimos margenes, width o height específicos. Originalmente ocupan todo*/

            /* PROPIEDAD FLEX WRAP (También se le da a la caja padre) */
/* Nos permite controlar el comportamiento de los flex-items una vez que el espacio (a lo ancho) es insuficiente para abarcar a todos los elementos */
/* Por defecto el valor está en no-wrap  */

.flexbox {
    flex-wrap: wrap; 
    
}
/* Con esto los elementos ya no se encojen. Se van para abajo directamente*/


            /* ALINEACIÓN (también a la caja padre) */

        /* Propiedad llamada justify-content */
/* Alínea los flex items en el eje principal (horizontalmente si es en row y verticalmente si es en column) */

.flexbox {
    justify-content: center; 
}

/* Valores: */
/* 
- start -> 
alínea los flex-items al principio del eje.
-- end -> 
Los alinea al final del eje. 
-- center -> 
los pone al centro del eje (conserva la separación entre ellos que se haya definido)
-- space-between -> 
Pone el 1er elemento al inicio del eje, el último elemento al final del eje, y los elementos del medio los distribuye en el centro del eje de forma equitativa. --> SIEMPRE EL PRIMERO Y EL ÚLTIMO ESTÁN FIJOS. SOLO VARÍA LA ALINEACIÓN DEL MEDIO
-- space-around: 
Hace que cada flex-item tenga una separación igual en las 4 direcciones -> Pero eso hace que se sumen los márgenes.
-- space-evenly: 
Similar a space-around, pero con esta propiedad -> hace que los flex-items tengan exactamente la misma distancia entre sí en el (eje principal)


        /* Propiedad llamada align-items */
/* Alínea los flex-items en el eje cruzado (de una sola línea o columna)*/

/* Su VALOR por defecto es stretch -> Los items se estiran para llenar todo el cross axis */

/* 
    VALORES:
--- start:
Solo ocupan en el cross axis el contenido que tienen adentro.
--- end: 
Los posiciona al final
--- center: 
Los posiciona al centro del cross axis
--- baseline: 
Se alinean según la línea base del texto (es decir, la línea "piso" del texto)
*/

/* 
Ejemplo: 
.flexbox {
    align-items: center;
} */

        /* Propiedad align-content */
/* Es igual que justify-content, pero ahora en el eje cruzado. PARA TODOS LOS FLEX-ITEMS, SIN IMPORTAR LA CANTIDAD.  */

    /* SON LOS MISMOS VALORES */

.flexbox {
    align-content: center;
}

        /* GAP */
/* Separar los elementos entre si */


            /* ORDENAMIENTO CON FLEXBOX (se le da a los flex items) */
/* Cambia el posicionamiento VISUAL de los flex-items */
/* es order: (número de orden asignado) */
/* Ojo. Si queremos hacer esto, habrá que hacerlo para todos. Porque por defecto el valor de order de un elemento es cero. */


                /* PROPIEDADES DE LOS HIJOS (flex-items) */
/* Cuanto van a crecer (como máximo) y cuanto van a achicarse (como máximo). Y su tamaño base */

        /* ENTENDER: LOS FLEX-ITEMS SON LOS HIJOS DIRECTOS DE UNA FLEXBOX PADRE */

    /* PROPIEDAD flex-grow */
/* Indica cuanto puede ocupar del espacio de la flexbox padre */

.flex-item {
    flex-grow: 1;
}

/* El número indica la cantidad de espacio disponible (el que aún no se llena tras haberse rellenado con los elementos) que usan en base a cuantos elementos hay.
si cada item tiene un flex-grow: 1 --> Todos ocupan una cantidad igual en la distribución de la flexbox padre. 

En cambio, si alguno tiene flex-grow: 2. Tiene  el doble de espacio en el contenedor que los otros*/

/* PROPIEDAD flex-shrink */
/* Determina su capacidad para encojerse. */
/* Por defecto su valor es 1 */
/* El valor de 0 hace que el flex-item no se encoja */

/* Se le puede asignar a un valor individual para determinar cuanto se puede encoger específicamente
Si, por ejemplo. Quiero que un flex-item se encoja más que los otros, le asigno un flex-shrink de mayor valor para que se encoja más que sus hermanos. */

/* PROPIEDAD flex-basis */
/* Es el tamaño base de los elementos */
/* Es decir: el tamaño base es lo máximo que se pueden achicar antes de que algún elemento vaya para abajo.  */


            /* PROPIEDAD QUE ABREVIA ESTAS 3 EN LOS FLEX-ITEMS */
/* flex: (grow) (shrink) (basis) */


.uno {
    flex: 4 1 60px
}

